{"version":3,"sources":["i.png","news.js","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","News","_ref","title","desc","author","content","publishedAt","img","link","react_default","a","createElement","className","id","src","alt","href","List","article","map","news","index","src_news","key","description","urlToImage","url","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","articles","_this2","fetch","then","response","json","users","setState","i","src_List","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCwBzBC,qBArBJ,SAAAC,GAAoD,IAAlDC,EAAkDD,EAAlDC,MAAMC,EAA4CF,EAA5CE,KAAKC,EAAuCH,EAAvCG,OAAOC,EAAgCJ,EAAhCI,QAAQC,EAAwBL,EAAxBK,YAAYC,EAAYN,EAAZM,IAAIC,EAAQP,EAARO,KACvD,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKC,GAAG,QACnBJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,SAASX,GACXO,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACLJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAKQ,IAAI,YAAYF,GAAG,QAE/BJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQV,GACdM,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQR,IAGxBI,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,qBAA+BJ,EAAAC,EAAAC,cAAA,KAAGK,KAAMR,GAAT,SAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,OAAN,iBAA2BT,GAC3BK,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,kBAA6BP,OCOzBW,EArBJ,SAAAhB,GAAa,IAAXiB,EAAWjB,EAAXiB,QAEA,OACKT,EAAAC,EAAAC,cAAA,WACAO,EAAQC,IAAI,SAACC,EAAKC,GACjB,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CACNC,IAAKF,EACLnB,MAAOgB,EAAQG,GAAOnB,MACtBE,OAAQc,EAAQG,GAAOjB,OACvBD,KAAMe,EAAQG,GAAOG,YACrBnB,QAASa,EAAQG,GAAOhB,QACxBC,YAAaY,EAAQG,GAAOf,YAC5BC,IAAKW,EAAQG,GAAOI,WACpBjB,KAAMU,EAAQG,GAAOK,0BCoB1BC,cA/Bf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACPC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAM,CACZC,SAAS,IAHDR,mFAOQ,IAAAS,EAAAN,KACjBO,MAAM,2FACHC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAUL,EAAKM,SAAS,CAAEP,SAAUM,EAAMN,8CAGlD,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKG,IAAK8B,IAAG7B,IAAI,OAAOH,UAAU,MAClCH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,KAAN,cACAJ,EAAAC,EAAAC,cAAA,OAAKG,IAAK8B,IAAG7B,IAAI,OAAOH,UAAU,OAE9BH,EAAAC,EAAAC,cAACkC,EAAD,CACE3B,QAASa,KAAKI,MAAMC,WACpB3B,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACRJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,aACAH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,4BAzBMiC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.9566db67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/i.37cbaf02.png\";","import React from 'react';\r\nimport 'tachyons';\r\nimport \"./article.css\"\r\nconst News=({title,desc,author,content,publishedAt,img,link})=>{\r\nreturn(\r\n\r\n<div className=\"tc\" id=\"card\">\r\n    <p id=\"title\">{title}</p>\r\n        <div id=\"main\">\r\n           <img src={img} alt=\"Not found\" id=\"ari\"></img>\r\n             \r\n              <p id=\"desc\">{desc}</p>\r\n              <p id=\"cont\">{content}</p>\r\n         \r\n        </div>\r\n    <p id=\"link\">To read more click<a href={link}>HERE</a></p>\r\n        <div className=\"end\"> \r\n           <p id=\"aut\">Published By: {author}</p>\r\n           <p id=\"time\"> Published At: {publishedAt}</p>\r\n        </div>   \r\n </div>      \r\n\t);\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport News from './news.js';\r\n\r\n\r\nconst List=({article})=>{\r\n\r\n        \t    return(     \r\n        \t         <div>{\r\n        \t         article.map((news,index)=>{\r\n        \t         \treturn(<News \r\n        \t         \t\tkey={index}\r\n        \t         \t\ttitle={article[index].title}\r\n        \t         \t\tauthor={article[index].author}\r\n        \t         \t\tdesc={article[index].description}\r\n        \t         \t\tcontent={article[index].content}\r\n        \t         \t\tpublishedAt={article[index].publishedAt}\r\n        \t         \t\timg={article[index].urlToImage}\r\n        \t         \t\tlink={article[index].url}/>);\r\n        \t         \r\n        \t                 \t     })}\r\n        \t         </div>\r\n        \t         );\r\n        \t}\r\n\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './List.js';\nimport i from \"./i.png\";\n\nclass App extends Component {\nconstructor(){\n      super()\n      this.state={\n     articles:[]\n      }\n    }\n\n componentDidMount() {\n    fetch('https://newsapi.org/v2/top-headlines?country=in&apiKey=9974f8e9b5114eb786a4712bb59ed8cd')\n      .then(response=> response.json())\n      .then(users => {this.setState({ articles: users.articles})});\n  }\n  render() {\n    return (\n      <div className=\"body\">\n      <div className=\"head\">\n      <img src={i} alt=\"logo\" className=\"i\"></img>\n      <p id=\"h\">FLASH NEWS</p>\n      <img src={i} alt=\"logo\" className=\"i\"></img>\n      </div>\n          <List\n            article={this.state.articles} />\n            <div id=\"foot\">\n            <p className=\"foot\">Made by: </p>\n            <p id=\"name\"> Shreyash Gupta</p>\n        </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}