{"version":3,"sources":["i.png","news.js","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","News","_ref","title","desc","author","content","publishedAt","img","link","react_default","a","createElement","className","id","src","alt","href","List","article","map","news","index","src_news","key","description","urlToImage","url","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","articles","_this2","fetch","then","response","json","users","setState","length","i","src_List","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCwBzBC,qBArBJ,SAAAC,GAAoD,IAAlDC,EAAkDD,EAAlDC,MAAMC,EAA4CF,EAA5CE,KAAKC,EAAuCH,EAAvCG,OAAOC,EAAgCJ,EAAhCI,QAAQC,EAAwBL,EAAxBK,YAAYC,EAAYN,EAAZM,IAAIC,EAAQP,EAARO,KACvD,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKC,GAAG,QACnBJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,SAASX,GACXO,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACLJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAKQ,IAAI,YAAYF,GAAG,QAE/BJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQV,GACdM,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQR,IAGxBI,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,qBAA+BJ,EAAAC,EAAAC,cAAA,KAAGK,KAAMR,GAAT,SAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,OAAN,iBAA2BT,GAC3BK,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,kBAA6BP,OCOzBW,EArBJ,SAAAhB,GAAa,IAAXiB,EAAWjB,EAAXiB,QAEA,OACKT,EAAAC,EAAAC,cAAA,WACAO,EAAQC,IAAI,SAACC,EAAKC,GACjB,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CACNC,IAAKF,EACLnB,MAAOgB,EAAQG,GAAOnB,MACtBE,OAAQc,EAAQG,GAAOjB,OACvBD,KAAMe,EAAQG,GAAOG,YACrBnB,QAASa,EAAQG,GAAOhB,QACxBC,YAAaY,EAAQG,GAAOf,YAC5BC,IAAKW,EAAQG,GAAOI,WACpBjB,KAAMU,EAAQG,GAAOK,0BCwB1BC,cAnCf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACPC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAM,CACZC,SAAS,IAHDR,mFAOQ,IAAAS,EAAAN,KACjBO,MAAM,2FACHC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAUL,EAAKM,SAAS,CAAEP,SAAUM,EAAMN,8CAGlD,OAAgC,IAA7BL,KAAKI,MAAMC,SAASQ,OAEnBnC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,gBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKG,IAAK+B,IAAG9B,IAAI,OAAOH,UAAU,MAClCH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,KAAN,cACAJ,EAAAC,EAAAC,cAAA,OAAKG,IAAK+B,IAAG9B,IAAI,OAAOH,UAAU,OAE9BH,EAAAC,EAAAC,cAACmC,EAAD,CACE5B,QAASa,KAAKI,MAAMC,WACpB3B,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACRJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,aACAH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,4BA5BMkC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.88c5cceb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/i.37cbaf02.png\";","import React from 'react';\r\nimport 'tachyons';\r\nimport \"./article.css\"\r\nconst News=({title,desc,author,content,publishedAt,img,link})=>{\r\nreturn(\r\n\r\n<div className=\"tc\" id=\"card\">\r\n    <p id=\"title\">{title}</p>\r\n        <div id=\"main\">\r\n           <img src={img} alt=\"Not found\" id=\"ari\"></img>\r\n             \r\n              <p id=\"desc\">{desc}</p>\r\n              <p id=\"cont\">{content}</p>\r\n         \r\n        </div>\r\n    <p id=\"link\">To read more click<a href={link}>HERE</a></p>\r\n        <div className=\"end\"> \r\n           <p id=\"aut\">Published By: {author}</p>\r\n           <p id=\"time\"> Published At: {publishedAt}</p>\r\n        </div>   \r\n </div>      \r\n\t);\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport News from './news.js';\r\n\r\n\r\nconst List=({article})=>{\r\n\r\n        \t    return(     \r\n        \t         <div>{\r\n        \t         article.map((news,index)=>{\r\n        \t         \treturn(<News \r\n        \t         \t\tkey={index}\r\n        \t         \t\ttitle={article[index].title}\r\n        \t         \t\tauthor={article[index].author}\r\n        \t         \t\tdesc={article[index].description}\r\n        \t         \t\tcontent={article[index].content}\r\n        \t         \t\tpublishedAt={article[index].publishedAt}\r\n        \t         \t\timg={article[index].urlToImage}\r\n        \t         \t\tlink={article[index].url}/>);\r\n        \t         \r\n        \t                 \t     })}\r\n        \t         </div>\r\n        \t         );\r\n        \t}\r\n\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport List from './List.js';\r\nimport i from \"./i.png\";\r\n\r\nclass App extends Component {\r\nconstructor(){\r\n      super()\r\n      this.state={\r\n     articles:[]\r\n      }\r\n    }\r\n\r\n componentDidMount() {\r\n    fetch('https://newsapi.org/v2/top-headlines?country=in&apiKey=9974f8e9b5114eb786a4712bb59ed8cd')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ articles: users.articles})});\r\n  }\r\n  render() {\r\n    if(this.state.articles.length===0)\r\n      {return(\r\n        <h1 className=\"load\">LOADING.....</h1>);}\r\n    else{    return (\r\n      <div className=\"body\">\r\n      <div className=\"head\">\r\n      <img src={i} alt=\"logo\" className=\"i\"></img>\r\n      <p id=\"h\">FLASH NEWS</p>\r\n      <img src={i} alt=\"logo\" className=\"i\"></img>\r\n      </div>\r\n          <List\r\n            article={this.state.articles} />\r\n            <div id=\"foot\">\r\n            <p className=\"foot\">Made by: </p>\r\n            <p id=\"name\"> Shreyash Gupta</p>\r\n        </div>\r\n        </div>\r\n    );}\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}